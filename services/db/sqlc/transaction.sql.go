// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    from_user,
    to_user,
    amount
) VALUES (
    $1, $2, $3
) RETURNING id, from_user, to_user, amount, created_at
`

type CreateTransactionParams struct {
	FromUser string `json:"from_user"`
	ToUser   string `json:"to_user"`
	Amount   int64  `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.FromUser, arg.ToUser, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromUser,
		&i.ToUser,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const searchIncomeTransactions = `-- name: SearchIncomeTransactions :many
SELECT id, from_user, to_user, amount, created_at FROM transactions
WHERE to_user = $1
OFFSET $2 LIMIT $3
`

type SearchIncomeTransactionsParams struct {
	ToUser string `json:"to_user"`
	Offset int32  `json:"offset"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) SearchIncomeTransactions(ctx context.Context, arg SearchIncomeTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, searchIncomeTransactions, arg.ToUser, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchOutcomeTransactions = `-- name: SearchOutcomeTransactions :many
SELECT id, from_user, to_user, amount, created_at FROM transactions
WHERE from_user = $1
OFFSET $2 LIMIT $3
`

type SearchOutcomeTransactionsParams struct {
	FromUser string `json:"from_user"`
	Offset   int32  `json:"offset"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) SearchOutcomeTransactions(ctx context.Context, arg SearchOutcomeTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, searchOutcomeTransactions, arg.FromUser, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTransactionsWithUser = `-- name: SearchTransactionsWithUser :many
SELECT id, from_user, to_user, amount, created_at FROM transactions
WHERE to_user = $3 OR from_user = $3
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type SearchTransactionsWithUserParams struct {
	Offset     int32  `json:"offset"`
	Limit      int32  `json:"limit"`
	SearchUser string `json:"search_user"`
}

func (q *Queries) SearchTransactionsWithUser(ctx context.Context, arg SearchTransactionsWithUserParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, searchTransactionsWithUser, arg.Offset, arg.Limit, arg.SearchUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.FromUser,
			&i.ToUser,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
