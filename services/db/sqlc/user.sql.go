// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    hashed_password
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, hashed_password, balance, created_at, status
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Balance,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, hashed_password, balance, created_at, status FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Balance,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, hashed_password, balance, created_at, status FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Balance,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const updateTwoUserBalance = `-- name: UpdateTwoUserBalance :many
UPDATE users
SET balance = CASE
    WHEN username = $2 THEN balance - $1
    WHEN username = $3 THEN balance + $1
END
WHERE username IN ($2, $3)
RETURNING username, balance
`

type UpdateTwoUserBalanceParams struct {
	Balance      int64  `json:"balance"`
	FromUsername string `json:"from_username"`
	ToUsername   string `json:"to_username"`
}

type UpdateTwoUserBalanceRow struct {
	Username string `json:"username"`
	Balance  int64  `json:"balance"`
}

func (q *Queries) UpdateTwoUserBalance(ctx context.Context, arg UpdateTwoUserBalanceParams) ([]UpdateTwoUserBalanceRow, error) {
	rows, err := q.db.QueryContext(ctx, updateTwoUserBalance, arg.Balance, arg.FromUsername, arg.ToUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UpdateTwoUserBalanceRow{}
	for rows.Next() {
		var i UpdateTwoUserBalanceRow
		if err := rows.Scan(&i.Username, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfo = `-- name: UpdateUserInfo :one
UPDATE users
SET
    hashed_password=COALESCE($2, hashed_password),
    email=COALESCE($3, email),
    status = COALESCE($4::user_status, status)
WHERE
    username=$1
RETURNING id, username, email, hashed_password, balance, created_at, status
`

type UpdateUserInfoParams struct {
	Username       string         `json:"username"`
	HashedPassword sql.NullString `json:"hashed_password"`
	Email          sql.NullString `json:"email"`
	UserStatus     NullUserStatus `json:"user_status"`
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfo,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.UserStatus,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.Balance,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
